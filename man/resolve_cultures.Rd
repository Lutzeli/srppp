% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resolve_cultures.R
\name{resolve_cultures}
\alias{resolve_cultures}
\title{Resolve culture specifications to their lowest hierarchical level}
\usage{
resolve_cultures(
  dataset,
  srppp,
  culture_column = "culture_de",
  correct_culture_names = TRUE
)
}
\arguments{
\item{dataset}{A data frame or tibble containing the data to be processed. It
should include a column that represents the culture information to be
resolved.}

\item{srppp}{An \link{srppp_dm} object. From this object the parent child relations
from the culture tree are used, which are stored as attribute 'parent_child_df'
of the culture tree, which is itself stored as an attribute of the object.}

\item{culture_column}{(Optional) A character string specifying the column in
the dataset that contains the culture information to be resolved. Defaults
to \code{"culture_de"}.}

\item{correct_culture_names}{If this argument is set to \code{TRUE}, the following
corrections will be applied: In the \code{culture_tree}, and consequently in the
\code{parent_child_df}, there are variations in the naming of aggregated culture
groups with "allg.". For example, both "Obstbau allg." and "allg. Obstbau"
exist. However, information about the leaf nodes is only available in the
culture groups that start with "allg. ...". This will be adjusted.}
}
\value{
A data frame or tibble with the same structure as the input
\code{dataset}, but with an additional column \code{"leaf_culture_de"} that contains
the resolved leaf culture levels.
}
\description{
Resolves culture levels in a dataset to their lowest hierarchical level (leaf nodes)
using a parent-child relationship dataset derived from a culture tree using
the German culture names. Only German culture names are supported.
If no match is found, the function assigns \code{NA} to the \code{leaf_culture_de} column.
If \code{correct_culture_names} is set to \code{TRUE}, the function corrects variations in
the naming of aggregated culture groups with "allg.".
}
\details{
The \code{resolve_cultures} function processes the input dataset as follows

\strong{Leaf Node Resolution}: The cultures in the specified column of the dataset are resolved to their
lowest hierarchical level (leaf nodes) based on the \code{parent_child_df} mapping.
For each row in the dataset, the function searches for a match in \code{parent_child_df}:
- If a match is found, new rows are generated for each corresponding leaf culture.
- If no match is found, the \code{leaf_culture_de} column is set to \code{NA}.

The result is an expanded dataset that includes an additional column (\code{leaf_culture_de}) containing
the resolved cultures at their lowest level.
}
\examples{
\donttest{
example_dataset_1 <- data.frame(
  substance_de = c("Spirotetramat", "Spirotetramat", "Spirotetramat", "Spirotetramat"),
  pNbr = c(7839, 7839, 7839, 7839),
  use_nr = c(5, 7, 18, 22),
  application_area_de = c("Obstbau", "Obstbau", "Obstbau", "Obstbau"),
  culture_de = c("Birne", "Kirsche", "Steinobst", "Kernobst"),
    pest_de = c("Birnblattsauger", "Kirschenfliege", "Blattläuse (Röhrenläuse)", "Spinnmilben")
    )

example_dataset_2 <- data.frame(
  substance_de = c("Spirotetramat", "Spirotetramat", "Spirotetramat", "Spirotetramat"),
  pNbr = c(7839, 7839, 7839, 7839),
  use_nr = c(5, 7, 18, 22),
  application_area_de = c("Obstbau", "Obstbau", "Obstbau", "Obstbau"),
  culture_de = c("Birne", "Kirschen", "Steinobst", "Obstbau allg."),
    pest_de = c("Birnblattsauger", "Kirschenfliege", "Blattläuse (Röhrenläuse)", "Spinnmilben")
    )

example_dataset_3 <- data.frame(
  substance_de = c("Pirimicarb"),
  pNbr = c(2210),
  use_nr = c(3),
  application_area_de = c("Feldbau"),
  culture_de = c("Getreide"),
    pest_de = c("Blattläuse (Röhrenläuse)")
    )
library(srppp)
current_register <- srppp_dm()

result1 <- resolve_cultures(example_dataset_1, current_register,
  correct_culture_names = FALSE)
print(result1)
result2 <- resolve_cultures(example_dataset_2, current_register,
 correct_culture_names = TRUE)
print(result2)
result3 <- resolve_cultures(example_dataset_2, current_register,
  correct_culture_names = FALSE)
print(result3)
result4 <- resolve_cultures(example_dataset_3, current_register,
  correct_culture_names = TRUE)
print(result4)
}
}
